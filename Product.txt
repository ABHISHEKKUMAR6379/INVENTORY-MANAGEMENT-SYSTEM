from tkinter import *
from tkinter import ttk
from tkinter import messagebox
import mysql.connector

class ProductClass:
    def __init__(self, root):
        self.root = root
        self.root.geometry("1330x650+200+130")
        self.root.title("INVENTORY MANAGEMENT SYSTEM")
        self.root.config(bg="white")
        self.root.focus_force()
        #===============
        self.var_searchby = StringVar()
        self.var_searchtxt = StringVar()
        self.var_pid = StringVar()
        self.var_name = StringVar()
        self.var_brand = StringVar()
        self.var_model = StringVar()
        self.var_hsn = StringVar()
        self.hsn_list = []
        self.var_unit = StringVar()
        
         #===searchFrame===
        SearchFrame=LabelFrame(self.root,text="Search Products",font=("goudy old style",12,"bold"),bd=2,relief=RIDGE,bg="white")
        SearchFrame.place(x=330,y=20,width=620,height=70)
        
        #===options==
        cmb_search=ttk.Combobox(SearchFrame,textvariable=self.var_searchby,values=("Select","Product ID","Product Name","Brand","HSN Code"),state='readonly',justify=CENTER,font=("goudy old style",15))
        cmb_search.place(x=15,y=10,width=180)
        cmb_search.current(0)
        
        txt_search=Entry(SearchFrame,textvariable=self.var_searchtxt,font=("goudy old style",15),bg="lightyellow").place(x=220,y=10)
        btn_search=Button(SearchFrame,text="Search",command=self.search,font=("goudy old style",15,"bold"),bg="green",fg="white",cursor="hand2").place(x=430,y=9,width=150,height=30)
        
        #===title===
        title=Label(self.root,text="Manage Product Details",font=("goudy old style",15),bg="#0f4d7d",fg="white").place(x=50,y=100,width=1220)
      
        
        #===content=============
        #===row1=================
        lbl_pid = Label(self.root, text="Product ID", font=("goudy old style", 15), bg="white").place(x=50, y=150)
        lbl_name = Label(self.root, text="Product Name", font=("goudy old style", 15), bg="white").place(x=460, y=150)
        lbl_brand = Label(self.root, text="Brand", font=("goudy old style", 15), bg="white").place(x=870, y=150)
        
        txt_pid = Entry(self.root, textvariable=self.var_pid, font=("goudy old style", 15), bg='lightyellow').place(x=200, y=150, width=200)
        txt_name = Entry(self.root, textvariable=self.var_name, font=("goudy old style", 15), bg='lightyellow').place(x=600, y=150, width=200)
        txt_brand = Entry(self.root, textvariable=self.var_brand, font=("goudy old style", 15), bg='lightyellow').place(x=1000, y=150, width=200)
        
        #===row2======================
        lbl_model = Label(self.root, text="Model", font=("goudy old style", 15), bg="white").place(x=50, y=190) 
        lbl_hsn = Label(self.root, text="HSN Code", font=("goudy old style", 15), bg="white").place(x=460, y=190)
        lbl_unit = Label(self.root, text="Unit", font=("goudy old style", 15), bg="white").place(x=870, y=190)
        
        txt_model = Entry(self.root, textvariable=self.var_model, font=("goudy old style", 15), bg='lightyellow').place(x=200, y=190, width=200)
        self.fetch_hsn()  # Populate category lists
        cmb_hsn = ttk.Combobox(self.root, textvariable=self.var_hsn, values=self.hsn_list, state='readonly', justify=CENTER, font=("goudy old style", 15))
        cmb_hsn.place(x=600, y=190, width=200)
        #cmb_hsn.current(0)
        txt_unit = Entry(self.root, textvariable=self.var_unit, font=("goudy old style", 15), bg='lightyellow').place(x=1000, y=190, width=200)
        
        #===row3===========================
        lbl_des = Label(self.root, text="Description", font=("goudy old style", 15), bg="white").place(x=50, y=230)
        self.txt_des = Text(self.root, font=("goudy old style", 15), bg="lightyellow")
        self.txt_des.place(x=200, y=230, width=340, height=60)
        self.txt_des.config(state="normal")  # Enable editing in the Text widget

        
        #===buttons===
        btn_add=Button(self.root,text="Save",command=self.add,font=("goudy old style",15,"bold"),bg="#2196f3",fg="white",cursor="hand2").place(x=600,y=305,width=110,height=28)
        btn_update=Button(self.root,text="Update",command=self.update,font=("goudy old style",15,"bold"),bg="#4caf50",fg="white",cursor="hand2").place(x=740,y=305,width=110,height=28)
        btn_delete=Button(self.root,text="Delete",command=self.delete,font=("goudy old style",15,"bold"),bg="#f44336",fg="white",cursor="hand2").place(x=880,y=305,width=110,height=28)
        btn_clear=Button(self.root,text="Clear",command=self.clear,font=("goudy old style",15,"bold"),bg="#607d8b",fg="white",cursor="hand2").place(x=1020,y=305,width=110,height=28)
        

        #==== Product Details===========
        
        p_frame = Frame(self.root, bd=3, relief=RIDGE)
        p_frame.place(x=0, y=350, relwidth=1, height=300)

        scrollx = Scrollbar(p_frame, orient=HORIZONTAL)
        scrolly = Scrollbar(p_frame, orient=VERTICAL)

        self.productTable = ttk.Treeview(p_frame, columns=("pid", "name", "brand", "model", "hsn", "unit","des"),yscrollcommand=scrolly.set,xscrollcommand=scrollx.set)
        scrollx.pack(side=BOTTOM, fill=X)
        scrolly.pack(side=RIGHT, fill=Y)
        
        scrollx.config(command=self.productTable.xview)
        scrolly.config(command=self.productTable.yview)

        self.productTable.heading("pid", text="P ID")
        self.productTable.heading("name", text="Product Name")
        self.productTable.heading("brand", text="Brand")
        self.productTable.heading("model", text="Model")
        self.productTable.heading("hsn", text="HSN Code")
        self.productTable.heading("unit", text="Unit")
        self.productTable.heading("des", text="Description")

        self.productTable["show"] = "headings"

        self.productTable.column("pid", width=90)
        self.productTable.column("name", width=100)
        self.productTable.column("brand", width=100)
        self.productTable.column("model", width=100)
        self.productTable.column("hsn", width=100)
        self.productTable.column("unit", width=100)
        self.productTable.column("des", width=100)
       

        self.productTable.pack(side=LEFT, fill=BOTH, expand=1)
        self.productTable.bind("<ButtonRelease-1>", self.get_data)

        self.show()

  #======================================================================== 

    def fetch_hsn(self):
        self.hsn_list.append("Empty")
        con = mysql.connector.connect(host='localhost', user='root', password='Abhi6379@', database='ims')
        cur = con.cursor()
        try:
            cur.execute("SELECT hsn_code FROM hsn")
            cats = cur.fetchall()
            if len(cats) > 0:
                self.hsn_list.clear()
                self.hsn_list.append("Select")
                for hsn in cats:
                    self.hsn_list.append(hsn[0])

           
        except Exception as ex:
            messagebox.showerror("ERROR", f"Error due to: {str(ex)}", parent=self.root)


    def add(self):
        con = mysql.connector.connect(host='localhost', user='root', password='Abhi6379@', database='ims')
        cur = con.cursor()
        try:
            if self.var_pid.get() == "Select" or self.var_name.get() == "Select":
                messagebox.showerror("Error", "All fields are required", parent=self.root)
            else:
                cur.execute("SELECT * FROM product WHERE pid=%s", (self.var_pid.get(),))
                row = cur.fetchone()
                if row is not None:
                    messagebox.showerror("Error", "Product already exists, try different", parent=self.root)
                else:
                    des = self.txt_des.get("1.0", END).strip()  # Retrieve description from Text widget
                    cur.execute("INSERT INTO product(pid,name, brand, model, hsn, unit,des) VALUES(%s, %s, %s, %s, %s, %s, %s)", (
                        self.var_pid.get(),
                        self.var_name.get(),
                        self.var_brand.get(),
                        self.var_model.get(),
                        self.var_hsn.get(),
                        self.var_unit.get(),
                        des,
                    ))
                    con.commit()
                    messagebox.showinfo("Success", "Product Added Successfully", parent=self.root)
                    self.show()  # Refresh the product table after adding the product
        except Exception as ex:
            messagebox.showerror("ERROR", f"Error due to: {str(ex)}", parent=self.root)

    def show(self):
        con = mysql.connector.connect(host='localhost', user='root', password='Abhi6379@', database='ims')
        cur = con.cursor()
        try:
            cur.execute("SELECT pid, name, brand, model, hsn, unit, des FROM product")
            rows = cur.fetchall()
            self.productTable.delete(*self.productTable.get_children())
            for row in rows:
                self.productTable.insert('', END, values=row)
        except Exception as ex:
            messagebox.showerror("ERROR", f"Error due to: {str(ex)}", parent=self.root)

  
        
    def get_data(self, ev):
        f = self.productTable.focus()
        if f:
            content = self.productTable.item(f)
            row = content['values']
            if row:
                self.var_pid.set(row[0])
                self.var_name.set(row[1])
                self.var_brand.set(row[2])
                self.var_model.set(row[3])
                self.var_hsn.set(row[4])
                self.var_unit.set(row[5])
                self.txt_des.delete("1.0", END)
                self.txt_des.insert(END, row[6])   
       
    def update(self):
        con = mysql.connector.connect(host='localhost', user='root', password='Abhi6379@', database='ims')
        cur = con.cursor()
        try:
            if self.var_pid.get() == "":
                messagebox.showerror("Error", "Please select product from the list", parent=self.root)
            else:
                cur.execute("SELECT * FROM product WHERE pid=%s", (self.var_pid.get(),))
                row = cur.fetchone()
                if row is None:
                    messagebox.showerror("Error", "Invalid Product", parent=self.root)
                else:
                    des = self.txt_des.get("1.0", END).strip()
                    cur.execute("UPDATE product SET name=%s, brand=%s, model=%s, hsn=%s, unit=%s, des=%s WHERE pid=%s", (
                    self.var_name.get(),
                    self.var_brand.get(),
                    self.var_model.get(),
                    self.var_hsn.get(),
                    self.var_unit.get(),
                    des,
                    self.var_pid.get(),
                ))
                con.commit()
                messagebox.showinfo("Success", "Product Updated Successfully", parent=self.root)
                self.show()
        except Exception as ex:
            messagebox.showerror("ERROR", f"Error due to: {str(ex)}", parent=self.root)

   
    def delete(self):
        con = mysql.connector.connect(host='localhost', user='root', password='Abhi6379@', database='ims')
        cur = con.cursor()
        try:
            if self.var_pid.get() == "":
                messagebox.showerror("Error", "Please select product from the list", parent=self.root)
            else:
                cur.execute("SELECT * FROM product WHERE pid=%s", (self.var_pid.get(),))
                row = cur.fetchone()
                if row is None:
                    messagebox.showerror("Error", "Invalid Product", parent=self.root)
                else:
                    confirm = messagebox.askyesno("Confirm Delete", "Are you sure you want to delete this product?", parent=self.root)
                    if confirm:
                        cur.execute("DELETE FROM product WHERE pid=%s", (self.var_pid.get(),))
                        con.commit()
                        messagebox.showinfo("Success", "Product Deleted Successfully", parent=self.root)
                        
                        self.show()
                        self.clear()        
        except Exception as ex:
            messagebox.showerror("ERROR", f"Error due to: {str(ex)}", parent=self.root)
            
            
    def clear(self):
        self.var_pid.set("")
        self.var_name.set("")
        self.var_brand.set("")
        self.var_model.set("")
        self.var_hsn.set("")
        self.var_unit.set("")
        self.txt_des.delete("1.0", END)
        
    def search(self):    
        con = mysql.connector.connect(host='localhost', user='root', password='Abhi6379@', database='ims')
        cur = con.cursor()
        try:
            if self.var_searchby.get() == "Select" :
                messagebox.showerror("Error", "Please select search criteria and enter search text", parent=self.root)
            else:
                query = ""
                search_text = "%" + self.var_searchtxt.get() + "%"
                if self.var_searchby.get() == "Product ID":
                    query = "SELECT * FROM product WHERE pid LIKE %s"
                    cur.execute(query, (search_text,))
                elif self.var_searchby.get() == "Product Name":
                    query = "SELECT * FROM product WHERE name LIKE %s"
                    cur.execute(query, (search_text,))
                elif self.var_searchby.get() == "Brand":
                    query = "SELECT * FROM product WHERE brand LIKE %s"
                    cur.execute(query, (search_text,))
                elif self.var_searchby.get() == "HSN Code":
                    query = "SELECT * FROM product WHERE hsn LIKE %s"
                    cur.execute(query, (search_text,))    


                rows = cur.fetchall()
                self.productTable.delete(*self.productTable.get_children())
                for row in rows:
                    self.productTable.insert("", END, values=row)

        except Exception as ex:
            messagebox.showerror("ERROR", f"Error due to: {str(ex)}", parent=self.root)

            
if __name__ == "__main__":
    root = Tk()
    obj = ProductClass(root)
    root.mainloop()
